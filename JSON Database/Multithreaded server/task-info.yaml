type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonRequestBuilder.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;

    class JsonBuilder {

        private final Gson gson = new Gson();
        private final JsonObject jsonObject = new JsonObject();

        private JsonBuilder() {
        }

        public static JsonBuilder newBuilder() {
            return new JsonBuilder();
        }

        public JsonBuilder addValue(String key, String value) {
            jsonObject.addProperty(key, value);
            return this;
        }

        public JsonBuilder addJsonObject(String key, JsonObject object) {
            jsonObject.add(key, object);
            return this;
        }

        public String getAsString() {
            return jsonObject.toString();
        }

        public JsonObject getAsJsonObject() {
            return jsonObject;
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        private static final String fileName = "db.json";
        private static final String clientDataPath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "client" + File.separator +
            "data";
        private static final String dbFilePath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "server" + File.separator +
            "data" + File.separator + fileName;

        private static int threadsCount;

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            if (!Files.exists(Path.of(dbFilePath))) {
                return CheckResult.wrong("Can't find /server/data/db.json file.");
            }

            try (FileWriter fileWriter = new FileWriter(new File(dbFilePath))) {
                fileWriter.write("{}");
            } catch (IOException e) {
                return CheckResult.wrong("Close the db.json file before starting the tests.");
            }

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.correct();
            }

            String setRequest = JsonBuilder.newBuilder()
                .addValue("type", "set")
                .addValue("key", "name")
                .addValue("value", "Kate")
                .getAsJsonObject().toString();

            String getRequest = JsonBuilder.newBuilder()
                .addValue("type", "get")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            String deleteRequest = JsonBuilder.newBuilder()
                .addValue("type", "delete")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            try {
                Files.write(Paths.get(clientDataPath + File.separator + "testSet.json"), setRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testGet.json"), getRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testDelete.json"), deleteRequest.getBytes());
            } catch (IOException e) {
                throw new WrongAnswer("Can't create test files in /client/data/ folder.");
            }


            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult checkDataFolder() {

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find /client/data/ folder.");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult testInputs() throws InterruptedException {

            threadsCount = getThreadCount();
            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-in", "testSet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "name")
                    .value("value", "Kate")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "Kate")
                );

            client = getClient();
            output = client.start("-in", "testDelete.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );

            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );
            checkIfThreadWasCreated();

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static int getThreadCount() {
            return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        private static void checkIfThreadWasCreated() {
            int total = getThreadCount();

             /*18 threads: 1 server thread and 17 client threads created during the test.
             If the server doesn't handle clients in a new thread then the difference between number of threads
             before and after the test should be equal 18 */
            if (total - threadsCount == 18) {
                throw new WrongAnswer("Looks like you don't process client connection in another thread.\n" +
                    "Every client request should be parsed and handled in a separate thread!");
            }
        }

        @AfterClass
        public static void deleteFiles() {
            try {
                Files.delete(Paths.get(clientDataPath + "testSet.json"));
                Files.delete(Paths.get(clientDataPath + "testGet.json"));
                Files.delete(Paths.get(clientDataPath + "testDelete.json"));
            } catch (IOException ignored) {
            }
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/client/builder/BuilderFactory.java
  visible: true
  text: |
    package client.builder;

    import java.util.List;
    import java.util.Map;
    import java.util.Set;

    public class BuilderFactory {
        private Set<IRequestBuilder> builders;

        public BuilderFactory(Set<IRequestBuilder> builders) {
            this.builders = builders;
        }

        public IRequestBuilder getBuilder(String title) {
            for (IRequestBuilder builder : builders) {
                if(builder.getSupportedTitles().contains(title)) {
                    return builder;
                }
            }
            throw new UnsupportedOperationException("No such operation");
        }
    }
  learner_created: true
- name: src/server/dao/ITextDao.java
  visible: true
  text: |
    package server.dao;

    public interface ITextDao {
        String getText(String key);
        void setText(String key, String text);
        void deleteText(String key);

        void save();
    }
  learner_created: true
- name: src/client/model/SetTextRequest.java
  visible: true
  text: |
    package client.model;

    public class SetTextRequest extends GetDeleteRequest {
        private final String value;

        public SetTextRequest(String type, String key, String value) {
            super(type, key);
            this.value = value;
        }

        public String getValue() {
            return value;
        }
    }
  learner_created: true
- name: src/server/ServerApp.java
  visible: true
  text: |
    package server;

    import client.builder.BuilderFactory;
    import client.builder.IRequestBuilder;
    import client.model.Request;
    import com.google.gson.Gson;
    import server.model.Response;
    import server.processor.ICommandProcessor;
    import server.processor.ProcessorFactory;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class ServerApp {
        private final ServerSocket serverSocket;
        private final ProcessorFactory processorFactory;
        private final BuilderFactory builderFactory;

        public ServerApp(ProcessorFactory processorFactory, ServerSocket serverSocket, BuilderFactory builderFactory) {
            this.serverSocket = serverSocket;
            this.processorFactory = processorFactory;
            this.builderFactory = builderFactory;
        }

        public void run() {
            Gson gson = new Gson();
            System.out.println("Server started!");
            while (true) {
                try (
                        Socket socket = serverSocket.accept();
                        DataInputStream inputStream = new DataInputStream(socket.getInputStream());
                        DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream())
                ) {
                    String requestStr = inputStream.readUTF();
                    Request request = gson.fromJson(requestStr, Request.class);
                    if (request.getType().equals("exit")) {
                        String exitResponseText = gson.toJson(new Response("OK"));
                        outputStream.writeUTF(exitResponseText);
                        return;
                    }
                    IRequestBuilder requestBuilder = builderFactory.getBuilder(request.getType());
                    ICommandProcessor processor = processorFactory.getProcessor(request.getType());
                    request = requestBuilder.buildRequest(requestStr);
                    Response response = processor.execute(request);
                    String responseText = gson.toJson(response);
                    outputStream.writeUTF(responseText);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
  learner_created: true
- name: src/client/builder/impl/GetDeleteRequestBuilder.java
  visible: true
  text: |
    package client.builder.impl;

    import client.builder.IRequestBuilder;
    import client.model.GetDeleteRequest;
    import client.model.Input;
    import client.model.Request;
    import com.google.gson.Gson;

    import java.util.Set;

    public class GetDeleteRequestBuilder implements IRequestBuilder {
        @Override
        public Set<String> getSupportedTitles() {
            return Set.of("get", "delete");
        }

        @Override
        public Request buildRequest(Input parameters) {
            return new GetDeleteRequest(parameters.getType(), parameters.getKey());
        }

        @Override
        public GetDeleteRequest buildRequest(String jsonRequest) {
            Gson gson = new Gson();
            return gson.fromJson(jsonRequest, GetDeleteRequest.class);
        }
    }
  learner_created: true
- name: src/server/processor/ProcessorFactory.java
  visible: true
  text: |
    package server.processor;

    import java.util.List;
    import java.util.Map;
    import java.util.function.Function;
    import java.util.stream.Collectors;

    public class ProcessorFactory {
        private final Map<String, ICommandProcessor> processors;

        public ProcessorFactory(List<ICommandProcessor> processors) {
            this.processors = processors.stream().collect(Collectors.toMap(ICommandProcessor::getSupportedTitle, Function.identity()));
        }

        public ICommandProcessor getProcessor(String title) {
            return processors.get(title);
        }
    }
  learner_created: true
- name: src/server/utils/ConsoleReader.java
  visible: true
  text: |
    package server.utils;

    import java.util.Scanner;

    public class ConsoleReader {
        private static final Scanner scanner = new Scanner(System.in);

        public static String readText() {
            return scanner.nextLine();
        }
    }
  learner_created: true
- name: src/server/service/IDictionaryService.java
  visible: true
  text: |
    package server.service;

    public interface IDictionaryService {
        String getText(String key);
        void setText(String key, String text);
        void deleteText(String key);
    }
  learner_created: true
- name: src/client/builder/IRequestBuilder.java
  visible: true
  text: |
    package client.builder;

    import client.model.Input;
    import client.model.Request;

    import java.util.Set;

    public interface IRequestBuilder {
        Set<String> getSupportedTitles();

        Request buildRequest(Input parameters);

        Request buildRequest(String jsonRequest);
    }
  learner_created: true
- name: src/server/dao/impl/JSONTextDao.java
  visible: true
  text: |
    package server.dao.impl;

    import com.google.gson.Gson;
    import com.google.gson.reflect.TypeToken;
    import server.dao.ITextDao;

    import java.io.*;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.util.HashMap;
    import java.util.Map;

    public class JSONTextDao implements ITextDao {
        private Map<String, String> dataStorage;
        private final String filename;

        public JSONTextDao(String filename) {
            this.filename = filename;
            init();
        }

        @Override
        public String getText(String key) {
            if (!dataStorage.containsKey(key)) {
                throw new IllegalArgumentException("No such key");
            }
            return dataStorage.get(key);
        }

        @Override
        public void setText(String key, String text) {
            dataStorage.put(key, text);
        }

        @Override
        public void deleteText(String key) {
            if (!dataStorage.containsKey(key)) {
                throw new IllegalArgumentException("No such key");
            }
            dataStorage.remove(key);
        }

        @Override
        public void save() {
            try {
                Gson gson = new Gson();
                File file = new File(filename);
                file.createNewFile();
                try (FileOutputStream fos = new FileOutputStream(file);
                     OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fos, StandardCharsets.UTF_8)
                ) {
                    gson.toJson(dataStorage, outputStreamWriter);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void init() {
            try {
                Gson gson = new Gson();
                File file = new File(filename);
                file.createNewFile();
                Path path = file.toPath();
                try (Reader reader = Files.newBufferedReader(path)) {
                    dataStorage = gson.fromJson(reader, new TypeToken<Map<String, String>>() {
                    }.getType());
                    if (dataStorage == null) {
                        dataStorage = new HashMap<>();
                    }
                }
            } catch (IOException e) {
                dataStorage = new HashMap<>();
            }
        }
    }
  learner_created: true
- name: src/client/builder/impl/SetTextRequestBuilder.java
  visible: true
  text: |
    package client.builder.impl;

    import client.builder.IRequestBuilder;
    import client.model.Input;
    import client.model.Request;
    import client.model.SetTextRequest;
    import com.google.gson.Gson;

    import java.util.Set;

    public class SetTextRequestBuilder implements IRequestBuilder {
        @Override
        public Set<String> getSupportedTitles() {
            return Set.of("set");
        }

        @Override
        public Request buildRequest(Input parameters) {
            return new SetTextRequest(parameters.getType(), parameters.getKey(), parameters.getValue());
        }

        @Override
        public SetTextRequest buildRequest(String jsonRequest) {
            Gson gson = new Gson();
            return gson.fromJson(jsonRequest, SetTextRequest.class);
        }
    }
  learner_created: true
- name: src/client/ClientApp.java
  visible: true
  text: |
    package client;

    import client.builder.BuilderFactory;
    import client.builder.IRequestBuilder;
    import client.model.Input;
    import client.model.Request;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;

    import java.io.*;
    import java.net.Socket;

    public class ClientApp {
        private final Socket socket;

        private final BuilderFactory factory;

        public ClientApp(Socket socket, BuilderFactory factory) {
            this.socket = socket;
            this.factory = factory;
        }

        public void run(Input parameters) {
            Gson gson = new Gson();
            System.out.println("Client started!");
            try (
                    DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());
                    DataInputStream inputStream = new DataInputStream(socket.getInputStream())
            ) {
                IRequestBuilder builder = factory.getBuilder(parameters.getType());
                Request request = builder.buildRequest(parameters);
                String requestString = gson.toJson(request, request.getClass());
                outputStream.writeUTF(requestString);
                String result = inputStream.readUTF();
                JsonObject jsonObject = new JsonObject();
                System.out.printf("""
                        Sent: %s
                        Received: %s
                        """, requestString, result);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/server/processor/impl/DeleteCommandProcessor.java
  visible: true
  text: |
    package server.processor.impl;

    import client.model.GetDeleteRequest;
    import client.model.Request;
    import server.model.ErrorResponse;
    import server.model.SuccessfulResponse;
    import server.model.Response;
    import server.processor.ICommandProcessor;
    import server.service.IDictionaryService;

    public class DeleteCommandProcessor implements ICommandProcessor {
        private final IDictionaryService dictionaryService;

        public DeleteCommandProcessor(IDictionaryService dictionaryService) {
            this.dictionaryService = dictionaryService;
        }

        @Override
        public Response execute(Request request) {
            try {
                GetDeleteRequest deleteRequest = (GetDeleteRequest) request;
                dictionaryService.deleteText(deleteRequest.getKey());
                return new Response("OK");
            } catch (IllegalArgumentException e) {
                return new ErrorResponse("ERROR", e.getMessage());
            }
        }

        @Override
        public String getSupportedTitle() {
            return "delete";
        }
    }
  learner_created: true
- name: src/server/model/ErrorResponse.java
  visible: true
  text: |
    package server.model;

    public class ErrorResponse extends Response{
        private String reason;

        public ErrorResponse(String response, String reason) {
            super(response);
            this.reason = reason;
        }

        public String getReason() {
            return reason;
        }
    }
  learner_created: true
- name: src/client/builder/impl/RequestBuilder.java
  visible: true
  text: |
    package client.builder.impl;

    import client.builder.IRequestBuilder;
    import client.model.Input;
    import client.model.Request;
    import com.google.gson.Gson;

    import java.util.Set;

    public class RequestBuilder implements IRequestBuilder {
        @Override
        public Set<String> getSupportedTitles() {
            return Set.of("exit");
        }

        @Override
        public Request buildRequest(Input parameters) {
            return new Request(parameters.getType());
        }

        @Override
        public Request buildRequest(String jsonRequest) {
            Gson gson = new Gson();
            return gson.fromJson(jsonRequest, Request.class);
        }
    }
  learner_created: true
- name: src/client/model/GetDeleteRequest.java
  visible: true
  text: |
    package client.model;

    public class GetDeleteRequest extends Request{
        private final String key;

        public GetDeleteRequest(String type, String key) {
            super(type);
            this.key = key;
        }

        public String getKey() {
            return key;
        }
    }
  learner_created: true
- name: src/server/model/Response.java
  visible: true
  text: |
    package server.model;

    public class Response {
        protected String response;

        public Response(String response) {
            this.response = response;
        }

        public String getResponse() {
            return response;
        }
    }
  learner_created: true
- name: src/server/processor/ICommandProcessor.java
  visible: true
  text: |
    package server.processor;

    import client.model.Request;
    import server.model.Response;

    public interface ICommandProcessor {
        String getSupportedTitle();
        Response execute(Request request);
    }
  learner_created: true
- name: src/client/model/Request.java
  visible: true
  text: |
    package client.model;

    import com.beust.jcommander.Parameter;

    import java.io.Serializable;

    public class Request implements Serializable {
        private final String type;

        public Request(String type) {
            this.type = type;
        }

        public String getType() {
            return type;
        }
    }
  learner_created: true
- name: src/server/utils/Validator.java
  visible: true
  text: |
    package server.utils;

    import java.util.regex.Matcher;

    public class Validator {
        public static boolean validateRequest(String request) {
            Matcher matcher = Constants.REQUEST_PATTERN.matcher(request);
            return matcher.matches();
        }
    }
  learner_created: true
- name: src/server/processor/impl/GetCommandProcessor.java
  visible: true
  text: |
    package server.processor.impl;

    import client.model.GetDeleteRequest;
    import client.model.Request;
    import server.model.ErrorResponse;
    import server.model.SuccessfulResponse;
    import server.model.Response;
    import server.processor.ICommandProcessor;
    import server.service.IDictionaryService;

    public class GetCommandProcessor implements ICommandProcessor {
        private final IDictionaryService dictionaryService;

        public GetCommandProcessor(IDictionaryService dictionaryService) {
            this.dictionaryService = dictionaryService;
        }

        @Override
        public Response execute(Request request) {
            try {
                GetDeleteRequest getRequest = (GetDeleteRequest) request;
                String value = dictionaryService.getText(getRequest.getKey());
                return new SuccessfulResponse("OK", value);
            } catch (IllegalArgumentException e) {
                return new ErrorResponse("ERROR", e.getMessage());
            }
        }

        @Override
        public String getSupportedTitle() {
            return "get";
        }

    }
  learner_created: true
- name: src/server/utils/Constants.java
  visible: true
  text: |
    package server.utils;

    import java.util.regex.Pattern;

    public class Constants {
        public static final Pattern REQUEST_PATTERN = Pattern.compile("^(delete|get) (\\d+)|(set) (\\d+) (\\w+)|exit$");
        public static final String ADDRESS = "127.0.0.1";
        public static final int PORT = 37612;
        public static final Pattern CLIENT_SERVER_REQUEST_PATTERN = Pattern.compile("^(Give me a record # )(\\d+)$");
        public static final String DB_FILENAME = "/Users/mponomarenko/IdeaProjects/JSON Database/JSON Database/task/src/server/utils/db.json";
    }
  learner_created: true
- name: src/server/service/impl/DictionaryService.java
  visible: true
  text: |
    package server.service.impl;

    import server.dao.ITextDao;
    import server.service.IDictionaryService;

    public class DictionaryService implements IDictionaryService {
        private final ITextDao textDao;

        public DictionaryService(ITextDao textDao) {
            this.textDao = textDao;
        }

        @Override
        public String getText(String key) {
            return textDao.getText(key);
        }

        @Override
        public void setText(String key, String text) {
            textDao.setText(key, text);
        }

        @Override
        public void deleteText(String key) {
            textDao.deleteText(key);
        }
    }
  learner_created: true
- name: src/server/model/SuccessfulResponse.java
  visible: true
  text: |
    package server.model;

    public class SuccessfulResponse extends Response {
        private String value;

        public SuccessfulResponse(String response, String value) {
            super(response);
            this.value = value;
        }

        public String getValue() {
            return value;
        }
    }
  learner_created: true
- name: src/server/processor/impl/SetCommandProcessor.java
  visible: true
  text: |
    package server.processor.impl;

    import client.model.Request;
    import client.model.SetTextRequest;
    import server.model.Response;
    import server.processor.ICommandProcessor;
    import server.service.IDictionaryService;

    public class SetCommandProcessor implements ICommandProcessor {
        private final IDictionaryService dictionaryService;

        public SetCommandProcessor(IDictionaryService dictionaryService) {
            this.dictionaryService = dictionaryService;
        }

        @Override
        public Response execute(Request request) {
            SetTextRequest setTextRequest = (SetTextRequest) request;
            dictionaryService.setText(setTextRequest.getKey(), setTextRequest.getValue());
            return new Response("OK");
        }

        @Override
        public String getSupportedTitle() {
            return "set";
        }
    }
  learner_created: true
- name: src/client/model/Input.java
  visible: true
  text: |
    package client.model;

    import com.beust.jcommander.Parameter;

    public class Input {
        @Parameter(names = {"-t"})
        private String type;
        @Parameter(names = {"-k"})
        private String key;
        @Parameter(names = {"-v"})
        private String value;

        public String getType() {
            return type;
        }

        public String getKey() {
            return key;
        }

        public String getValue() {
            return value;
        }
    }
  learner_created: true
- name: src/server/data/db.json
  visible: true
  learner_created: true
- name: src/client/utills/RequestService.java
  visible: true
  learner_created: true
- name: src/client/data/testGet.json
  visible: true
  learner_created: true
- name: src/client/data/testDelete.json
  visible: true
  learner_created: true
- name: src/client/data/testSet.json
  visible: true
  learner_created: true
- name: src/server/thread/RequestThread.java
  visible: true
  learner_created: true
- name: src/server/handler/ClientHandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5494#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 03 Oct 2022 14:24:14 UTC
record: 5
